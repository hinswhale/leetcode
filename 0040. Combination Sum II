* 0040. Combination Sum II
* 难度：Medium｜ 中等
* 相关知识点：Array| Backtracking
* 题目链接：[https://leetcode.com/problems/combination-sum-ii/description/](https://leetcode.com/problems/combination-sum-ii/description/)

```python

Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.

 

Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]
Example 2:

Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]
 

Constraints:

1 <= candidates.length <= 100
1 <= candidates[i] <= 50
1 <= target <= 30

```

### Solution1
```python
class Solution:
    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        def backtracking(start, target, ans):
            if target == 0:
                result.append(ans[:])
                return 

            for index in range(start, l):
                if index > start and candidates[index] == candidates[index -1]:
                    continue
                
                if target - candidates[index] < 0:
                    continue
                
                ans.append(candidates[index])
                backtracking(index+1 ,target - candidates[index] , ans)
                ans.pop()
                
        result = []
        l = len(candidates)
        candidates.sort()
        backtracking(0, target, [])
        return result
        
```
